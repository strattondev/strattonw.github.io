<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>aws on Wesley Stratton</title>
    <link>https://stratton.dev/tags/aws/</link>
    <description>Recent content in aws on Wesley Stratton</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 08 Sep 2019 17:25:00 -0700</lastBuildDate>
    
	<atom:link href="https://stratton.dev/tags/aws/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Secure Properties With KMS And Parameter Store</title>
      <link>https://stratton.dev/08-08-2019-secure-properties-with-kms-and-parameter-store/</link>
      <pubDate>Sun, 08 Sep 2019 17:25:00 -0700</pubDate>
      
      <guid>https://stratton.dev/08-08-2019-secure-properties-with-kms-and-parameter-store/</guid>
      <description>Amazon AWS offers an out of the box solution for secrets, called AWS Secrets Manager. If you&amp;rsquo;re hosting one or two secrets, then AWS Secrets Manager is a cost-effective solution, but when you hit three or more secrets there is a cheaper solution to store those secrest. This cheaper solution comes in the form of AWS Key Management Service (KMS) and AWS Systems Manager Parameter Store.
The pricing breakpoint comes at three secrest as AWS Secrets Manager has a $0.</description>
    </item>
    
    <item>
      <title>AWS SAM Getting Started in Go</title>
      <link>https://stratton.dev/04-07-2019-sam-getting-started-go/</link>
      <pubDate>Sun, 04 Aug 2019 22:12:14 -0700</pubDate>
      
      <guid>https://stratton.dev/04-07-2019-sam-getting-started-go/</guid>
      <description>In this post we&amp;rsquo;re going to set-up, deploy and, optionally, locally test an API Gateway and Lambda API backend. Using the default AWS SAM Go set-up we&amp;rsquo;re going to deploy a Lambda that will be invoked by a GET API Gateway request.
Command overview Below is a quick list of commands we&amp;rsquo;re going to be running to deploy our backend.
# Creates a bucket for SAM to upload our packaged application to aws s3 mb s3://{BUCKET_NAME} # Creates the default SAM set-up for Go sam init --runtime go # Builds the application cd sam-app make build # Package and uploads the backend sam package --output-template packaged.</description>
    </item>
    
    <item>
      <title>DynamoDB and Spring Boot</title>
      <link>https://stratton.dev/01-07-2019-dynamodb-spring-boot/</link>
      <pubDate>Mon, 01 Jul 2019 17:54:37 -0700</pubDate>
      
      <guid>https://stratton.dev/01-07-2019-dynamodb-spring-boot/</guid>
      <description>At work we were recently looking into setting up somethings in DynamoDB with Spring Boot for the first time as a team. We hit up Google and ended up on this page, https://www.baeldung.com/spring-data-dynamodb. Within a couple of seconds of reading there were a couple issues with this article that made we want to write this post. Now I know there are going to be issues with this post as well but I&amp;rsquo;m covering the big ones that were in that post.</description>
    </item>
    
    <item>
      <title>Static Website Analytics</title>
      <link>https://stratton.dev/02-06-2019-static-website-analytics/</link>
      <pubDate>Sun, 02 Jun 2019 11:11:40 -0700</pubDate>
      
      <guid>https://stratton.dev/02-06-2019-static-website-analytics/</guid>
      <description>In this post we&amp;rsquo;re going to build a simple serverless self-hosted analytics system. This is the simple set-up that I currently use to track visitors to my website. We&amp;rsquo;ll use a few simple tools to track visitors of our websites.
Overview The tools and services we&amp;rsquo;re going to use to build our simple analytics are:
 Golang Serverless framework AWS Lambda AWS Cloudwatch Javascript  Golang/AWS Lambda/Serverless Framework To get things off the ground we want to implement a lambda function that we can hit when someone vists our website.</description>
    </item>
    
  </channel>
</rss>