<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spring on Wesley Stratton</title>
    <link>https://stratton.dev/tags/spring/</link>
    <description>Recent content in spring on Wesley Stratton</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Jul 2019 17:54:37 -0700</lastBuildDate><atom:link href="https://stratton.dev/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DynamoDB and Spring Boot</title>
      <link>https://stratton.dev/01-07-2019-dynamodb-spring-boot/</link>
      <pubDate>Mon, 01 Jul 2019 17:54:37 -0700</pubDate>
      
      <guid>https://stratton.dev/01-07-2019-dynamodb-spring-boot/</guid>
      <description>At work we were recently looking into setting up somethings in DynamoDB with Spring Boot for the first time as a team. We hit up Google and ended up on this page, https://www.baeldung.com/spring-data-dynamodb. Within a couple of seconds of reading there were a couple issues with this article that made we want to write this post. Now I know there are going to be issues with this post as well but I&amp;rsquo;m covering the big ones that were in that post.</description>
    </item>
    
    <item>
      <title>Spring Dependency Injection</title>
      <link>https://stratton.dev/23-06-2019-spring-dependency-injection/</link>
      <pubDate>Sun, 23 Jun 2019 13:35:13 -0700</pubDate>
      
      <guid>https://stratton.dev/23-06-2019-spring-dependency-injection/</guid>
      <description>There are three ways to inject dependencies into beans in Spring, listed below. In this post we&amp;rsquo;ll quickly go over the three ways of injection.
 Constructor   Setter Field  Constructor-based injection Constructor-based injection is typically the best way to go about injecting dependencies into beans. With constructor-based injection we&amp;rsquo;re able to enforce two main ideas,
 Missing consturctor-based beans will cause a BeanDefinitionException if the dependency is missing   We&amp;rsquo;re able to make all constructor-based beans threadsafe by assigning them as private final class variables (more on this in a later blog post).</description>
    </item>
    
  </channel>
</rss>
